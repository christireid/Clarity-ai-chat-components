import * as React from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  Button,
  Badge,
  Input,
  Textarea,
  ScrollArea,
  cn,
} from '@clarity-chat/primitives'
import type { KnowledgeBase, KnowledgeSection } from '@clarity-chat/types'

export interface KnowledgeBaseViewerProps {
  knowledgeBase: KnowledgeBase
  onUpdate?: (sectionId: string, updates: Partial<KnowledgeSection>) => void
  onDelete?: (sectionId: string) => void
  onExport?: (format: 'pdf' | 'docx' | 'markdown') => void
  editable?: boolean
  className?: string
}

export const KnowledgeBaseViewer: React.FC<KnowledgeBaseViewerProps> = ({
  knowledgeBase,
  onUpdate,
  onDelete,
  onExport,
  editable = false,
  className,
}) => {
  const [searchQuery, setSearchQuery] = React.useState('')
  const [editingId, setEditingId] = React.useState<string | null>(null)
  const [editContent, setEditContent] = React.useState({ title: '', content: '' })
  const [expandedSections, setExpandedSections] = React.useState<Set<string>>(new Set())

  const filteredSections = React.useMemo(() => {
    if (!searchQuery) return knowledgeBase.sections
    const query = searchQuery.toLowerCase()
    return knowledgeBase.sections.filter(
      (s) =>
        s.title.toLowerCase().includes(query) ||
        s.content.toLowerCase().includes(query) ||
        s.tags.some((t) => t.toLowerCase().includes(query))
    )
  }, [knowledgeBase.sections, searchQuery])

  const toggleSection = (sectionId: string) => {
    setExpandedSections((prev) => {
      const next = new Set(prev)
      if (next.has(sectionId)) {
        next.delete(sectionId)
      } else {
        next.add(sectionId)
      }
      return next
    })
  }

  const startEditing = (section: KnowledgeSection) => {
    setEditingId(section.id)
    setEditContent({ title: section.title, content: section.content })
  }

  const saveEdit = () => {
    if (editingId && onUpdate) {
      onUpdate(editingId, editContent)
      setEditingId(null)
    }
  }

  const cancelEdit = () => {
    setEditingId(null)
    setEditContent({ title: '', content: '' })
  }

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-600'
    if (confidence >= 0.5) return 'text-yellow-600'
    return 'text-red-600'
  }

  return (
    <Card className={cn('h-full flex flex-col', className)}>
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              Knowledge Base
              <Badge variant={knowledgeBase.autoGenerated ? 'default' : 'secondary'}>
                {knowledgeBase.autoGenerated ? 'ü§ñ Auto-generated' : '‚úçÔ∏è Manual'}
              </Badge>
            </CardTitle>
            <CardDescription>
              {knowledgeBase.sections.length} sections ‚Ä¢ Version {knowledgeBase.version} ‚Ä¢
              Updated {knowledgeBase.lastUpdated.toLocaleDateString()}
            </CardDescription>
          </div>
          {onExport && (
            <div className="flex gap-2">
              <Button variant="outline" size="sm" onClick={() => onExport('markdown')}>
                üìù MD
              </Button>
              <Button variant="outline" size="sm" onClick={() => onExport('docx')}>
                üìÑ DOCX
              </Button>
              <Button variant="outline" size="sm" onClick={() => onExport('pdf')}>
                üìï PDF
              </Button>
            </div>
          )}
        </div>

        {/* Search */}
        <Input
          placeholder="Search knowledge base..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          icon={<span>üîç</span>}
          iconPosition="left"
        />
      </CardHeader>

      <CardContent className="flex-1 overflow-hidden">
        <ScrollArea className="h-full">
          {filteredSections.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-64 text-center">
              <div className="text-6xl mb-4">üìö</div>
              <p className="text-sm font-medium">No knowledge sections yet</p>
              <p className="text-xs text-muted-foreground mt-1">
                {searchQuery
                  ? 'Try a different search query'
                  : 'Knowledge will be automatically generated as you chat'}
              </p>
            </div>
          ) : (
            <div className="space-y-3 pb-4">
              <AnimatePresence>
                {filteredSections.map((section, index) => {
                  const isExpanded = expandedSections.has(section.id)
                  const isEditing = editingId === section.id

                  return (
                    <motion.div
                      key={section.id}
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: 10 }}
                      transition={{ delay: index * 0.05 }}
                    >
                      <Card className="overflow-hidden">
                        {/* Header */}
                        <div
                          className="p-4 cursor-pointer hover:bg-muted/50 transition-colors"
                          onClick={() => !isEditing && toggleSection(section.id)}
                        >
                          <div className="flex items-start gap-3">
                            <button
                              className="flex-shrink-0 w-6 h-6 flex items-center justify-center transition-transform"
                              style={{
                                transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',
                              }}
                            >
                              ‚ñ∂
                            </button>

                            <div className="flex-1 min-w-0">
                              {isEditing ? (
                                <Input
                                  value={editContent.title}
                                  onChange={(e) =>
                                    setEditContent({ ...editContent, title: e.target.value })
                                  }
                                  onClick={(e) => e.stopPropagation()}
                                  placeholder="Section title"
                                />
                              ) : (
                                <>
                                  <h3 className="font-semibold text-sm">{section.title}</h3>
                                  <div className="flex items-center gap-2 mt-1">
                                    <Badge
                                      variant="outline"
                                      className={cn('text-xs', getConfidenceColor(section.confidence))}
                                    >
                                      {(section.confidence * 100).toFixed(0)}% confidence
                                    </Badge>
                                    <span className="text-xs text-muted-foreground">
                                      {section.sources.length} sources
                                    </span>
                                  </div>
                                </>
                              )}
                            </div>

                            {/* Actions */}
                            {editable && !isEditing && (
                              <div className="flex-shrink-0 flex gap-1">
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    startEditing(section)
                                  }}
                                  className="h-8 w-8"
                                >
                                  ‚úèÔ∏è
                                </Button>
                                {onDelete && (
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={(e) => {
                                      e.stopPropagation()
                                      if (confirm(`Delete section "${section.title}"?`)) {
                                        onDelete(section.id)
                                      }
                                    }}
                                    className="h-8 w-8 text-destructive"
                                  >
                                    üóëÔ∏è
                                  </Button>
                                )}
                              </div>
                            )}
                          </div>

                          {/* Tags */}
                          {!isEditing && section.tags.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-2 ml-9">
                              {section.tags.map((tag) => (
                                <Badge key={tag} variant="outline" className="text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          )}
                        </div>

                        {/* Content */}
                        <AnimatePresence>
                          {isExpanded && (
                            <motion.div
                              initial={{ height: 0, opacity: 0 }}
                              animate={{ height: 'auto', opacity: 1 }}
                              exit={{ height: 0, opacity: 0 }}
                              className="border-t"
                            >
                              <div className="p-4 ml-9 space-y-3">
                                {isEditing ? (
                                  <>
                                    <Textarea
                                      value={editContent.content}
                                      onChange={(e) =>
                                        setEditContent({ ...editContent, content: e.target.value })
                                      }
                                      rows={6}
                                      placeholder="Section content"
                                    />
                                    <div className="flex gap-2">
                                      <Button size="sm" onClick={saveEdit}>
                                        Save
                                      </Button>
                                      <Button variant="outline" size="sm" onClick={cancelEdit}>
                                        Cancel
                                      </Button>
                                    </div>
                                  </>
                                ) : (
                                  <>
                                    <div className="prose prose-sm dark:prose-invert max-w-none">
                                      <p className="text-sm whitespace-pre-wrap">{section.content}</p>
                                    </div>

                                    {/* Sources */}
                                    {section.sources.length > 0 && (
                                      <div className="pt-3 border-t">
                                        <p className="text-xs font-semibold mb-2">Sources:</p>
                                        <div className="space-y-2">
                                          {section.sources.map((source, i) => (
                                            <div
                                              key={i}
                                              className="p-2 rounded bg-muted/50 text-xs"
                                            >
                                              <p className="text-muted-foreground truncate">
                                                "{source.excerpt}"
                                              </p>
                                              <p className="text-muted-foreground mt-1">
                                                {source.timestamp.toLocaleString()}
                                              </p>
                                            </div>
                                          ))}
                                        </div>
                                      </div>
                                    )}
                                  </>
                                )}
                              </div>
                            </motion.div>
                          )}
                        </AnimatePresence>
                      </Card>
                    </motion.div>
                  )
                })}
              </AnimatePresence>
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  )
}
