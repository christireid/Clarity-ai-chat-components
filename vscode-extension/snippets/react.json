{
  "Chat Component": {
    "prefix": "cc-react-chat",
    "body": [
      "import { useState } from 'react'",
      "",
      "export function ChatComponent() {",
      "  const [messages, setMessages] = useState<Array<{ role: string; content: string }>>([])",
      "  const [input, setInput] = useState('')",
      "  const [loading, setLoading] = useState(false)",
      "",
      "  async function handleSend() {",
      "    if (!input.trim()) return",
      "    ",
      "    const userMessage = { role: 'user', content: input }",
      "    setMessages(prev => [...prev, userMessage])",
      "    setInput('')",
      "    setLoading(true)",
      "    ",
      "    try {",
      "      const response = await fetch('/api/chat', {",
      "        method: 'POST',",
      "        headers: { 'Content-Type': 'application/json' },",
      "        body: JSON.stringify({ message: input })",
      "      })",
      "      ",
      "      const data = await response.json()",
      "      setMessages(prev => [...prev, { role: 'assistant', content: data.content }])",
      "    } catch (error) {",
      "      console.error('Error:', error)",
      "    } finally {",
      "      setLoading(false)",
      "    }",
      "  }",
      "",
      "  return (",
      "    <div className=\"chat-container\">",
      "      <div className=\"messages\">",
      "        {messages.map((msg, i) => (",
      "          <div key={i} className={`message ${msg.role}`}>",
      "            {msg.content}",
      "          </div>",
      "        ))}",
      "      </div>",
      "      <div className=\"input-area\">",
      "        <input",
      "          value={input}",
      "          onChange={(e) => setInput(e.target.value)}",
      "          onKeyDown={(e) => e.key === 'Enter' && handleSend()}",
      "          placeholder=\"Type a message...\"",
      "          disabled={loading}",
      "        />",
      "        <button onClick={handleSend} disabled={loading}>",
      "          {loading ? 'Sending...' : 'Send'}",
      "        </button>",
      "      </div>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Complete React chat component"
  },

  "Streaming Chat Component": {
    "prefix": "cc-react-stream",
    "body": [
      "import { useState } from 'react'",
      "",
      "export function StreamingChat() {",
      "  const [messages, setMessages] = useState<Array<{ role: string; content: string }>>([])",
      "  const [input, setInput] = useState('')",
      "  const [streaming, setStreaming] = useState(false)",
      "",
      "  async function handleStream() {",
      "    if (!input.trim()) return",
      "    ",
      "    setMessages(prev => [...prev, { role: 'user', content: input }])",
      "    setInput('')",
      "    setStreaming(true)",
      "    ",
      "    const response = await fetch('/api/stream', {",
      "      method: 'POST',",
      "      headers: { 'Content-Type': 'application/json' },",
      "      body: JSON.stringify({ message: input })",
      "    })",
      "    ",
      "    const reader = response.body?.getReader()",
      "    const decoder = new TextDecoder()",
      "    let assistantMessage = ''",
      "    ",
      "    setMessages(prev => [...prev, { role: 'assistant', content: '' }])",
      "    ",
      "    while (true) {",
      "      const { done, value } = await reader!.read()",
      "      if (done) break",
      "      ",
      "      const chunk = decoder.decode(value)",
      "      const lines = chunk.split('\\n')",
      "      ",
      "      for (const line of lines) {",
      "        if (line.startsWith('data: ')) {",
      "          const data = JSON.parse(line.slice(6))",
      "          assistantMessage += data.content",
      "          setMessages(prev => [",
      "            ...prev.slice(0, -1),",
      "            { role: 'assistant', content: assistantMessage }",
      "          ])",
      "        }",
      "      }",
      "    }",
      "    ",
      "    setStreaming(false)",
      "  }",
      "",
      "  return (",
      "    <div className=\"streaming-chat\">",
      "      <div className=\"messages\">",
      "        {messages.map((msg, i) => (",
      "          <div key={i} className={`message ${msg.role}`}>",
      "            {msg.content}",
      "          </div>",
      "        ))}",
      "      </div>",
      "      <input",
      "        value={input}",
      "        onChange={(e) => setInput(e.target.value)}",
      "        onKeyDown={(e) => e.key === 'Enter' && handleStream()}",
      "        disabled={streaming}",
      "      />",
      "      <button onClick={handleStream} disabled={streaming}>",
      "        {streaming ? 'Streaming...' : 'Send'}",
      "      </button>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "React component with streaming chat"
  },

  "useChat Hook": {
    "prefix": "cc-use-chat",
    "body": [
      "import { useState, useCallback } from 'react'",
      "",
      "interface Message {",
      "  role: 'user' | 'assistant'",
      "  content: string",
      "}",
      "",
      "export function useChat() {",
      "  const [messages, setMessages] = useState<Message[]>([])",
      "  const [loading, setLoading] = useState(false)",
      "  const [error, setError] = useState<string | null>(null)",
      "",
      "  const sendMessage = useCallback(async (content: string) => {",
      "    setLoading(true)",
      "    setError(null)",
      "    ",
      "    const userMessage: Message = { role: 'user', content }",
      "    setMessages(prev => [...prev, userMessage])",
      "    ",
      "    try {",
      "      const response = await fetch('/api/chat', {",
      "        method: 'POST',",
      "        headers: { 'Content-Type': 'application/json' },",
      "        body: JSON.stringify({ message: content })",
      "      })",
      "      ",
      "      if (!response.ok) throw new Error('Failed to send message')",
      "      ",
      "      const data = await response.json()",
      "      const assistantMessage: Message = { role: 'assistant', content: data.content }",
      "      setMessages(prev => [...prev, assistantMessage])",
      "    } catch (err) {",
      "      setError(err instanceof Error ? err.message : 'Unknown error')",
      "    } finally {",
      "      setLoading(false)",
      "    }",
      "  }, [])",
      "",
      "  const clearMessages = useCallback(() => {",
      "    setMessages([])",
      "    setError(null)",
      "  }, [])",
      "",
      "  return {",
      "    messages,",
      "    loading,",
      "    error,",
      "    sendMessage,",
      "    clearMessages",
      "  }",
      "}"
    ],
    "description": "Custom React hook for chat functionality"
  },

  "Message Bubble Component": {
    "prefix": "cc-message-bubble",
    "body": [
      "interface MessageBubbleProps {",
      "  role: 'user' | 'assistant'",
      "  content: string",
      "  timestamp?: Date",
      "}",
      "",
      "export function MessageBubble({ role, content, timestamp }: MessageBubbleProps) {",
      "  return (",
      "    <div className={`message-bubble ${role}`}>",
      "      <div className=\"message-header\">",
      "        <span className=\"role\">{role === 'user' ? 'You' : 'AI'}</span>",
      "        {timestamp && (",
      "          <span className=\"timestamp\">",
      "            {timestamp.toLocaleTimeString()}",
      "          </span>",
      "        )}",
      "      </div>",
      "      <div className=\"message-content\">",
      "        {content}",
      "      </div>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Message bubble component"
  },

  "Chat Input Component": {
    "prefix": "cc-chat-input",
    "body": [
      "import { useState, KeyboardEvent } from 'react'",
      "",
      "interface ChatInputProps {",
      "  onSend: (message: string) => void",
      "  disabled?: boolean",
      "  placeholder?: string",
      "}",
      "",
      "export function ChatInput({ onSend, disabled, placeholder }: ChatInputProps) {",
      "  const [input, setInput] = useState('')",
      "",
      "  function handleSend() {",
      "    if (input.trim() && !disabled) {",
      "      onSend(input)",
      "      setInput('')",
      "    }",
      "  }",
      "",
      "  function handleKeyDown(e: KeyboardEvent<HTMLTextAreaElement>) {",
      "    if (e.key === 'Enter' && !e.shiftKey) {",
      "      e.preventDefault()",
      "      handleSend()",
      "    }",
      "  }",
      "",
      "  return (",
      "    <div className=\"chat-input\">",
      "      <textarea",
      "        value={input}",
      "        onChange={(e) => setInput(e.target.value)}",
      "        onKeyDown={handleKeyDown}",
      "        placeholder={placeholder || 'Type a message...'}",
      "        disabled={disabled}",
      "        rows={1}",
      "      />",
      "      <button onClick={handleSend} disabled={disabled || !input.trim()}>",
      "        Send",
      "      </button>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Chat input component with auto-resize"
  }
}
